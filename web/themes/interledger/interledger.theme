<?php

use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess()
 * 
 * Preprocess theme variables for templates
 */
function interledger_preprocess(&$variables) {
  $path_logo_admin = theme_get_setting('logo.url');
  $variables['logo_path'] = $path_logo_admin;

  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  $variables['current_page_title'] = $page_title;

  $status = \Drupal::requestStack()->getCurrentRequest()->attributes->get('exception');
  if ($status) {
    $status_code = $status->getStatusCode();
    $variables['error_code'] = $status_code;
  }
}

/**
 * Implements hook_preprocess_HOOK() for html
 * 
 * Add CSS classes to body element
 */
function interledger_preprocess_html(&$variables) {
  $statusCode = Drupal::request()->query->get('_exception_statuscode');
  if (isset($statusCode)) {
    $variables['attributes']['class'][] = 'page-' . $statusCode;
  }
}

/**
 * Prepares a translation disclaimer flag for block--interledger-content.
 *
 * Sets `showTranslationDisclaimer` to TRUE if the current node lacks a translation
 * in the active language.
 */
function interledger_preprocess_block__interledger_content(&$variables) {
  $default_language = \Drupal::languageManager()->getDefaultLanguage()->getId();
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $node = \Drupal::routeMatch()->getParameter('node');
  $variables['showTranslationDisclaimer'] = false;

  if ($node instanceof Node && $current_language !== $default_language) {
    $hasTranslation = $node->hasTranslation($current_language);
    if (!$hasTranslation) {
      $variables['showTranslationDisclaimer'] = true;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for nodes.
 *
 * Adds custom CSS classes based on content type and field values.
 * For hero_banner nodes, adds text alignment classes based on field_text_alignment.
 */
function interledger_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->getType() == 'hero_banner') {
    // Check if the alignment field exists and has a value
    if ($node->hasField('field_text_alignment') && !$node->get('field_text_alignment')->isEmpty()) {
      $alignment = $node->get('field_text_alignment')->value;
      $variables['attributes']['class'][] = 'text-alignment-' . $alignment;
    }
  }
}

